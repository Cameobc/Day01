
public class Default {
//	package  패키지명;
//	import  풀패키지명;
// 접근지정자 [그외지정자] class  클래스명 [extends 부모클래스명  implements  인터페이스1, 인터페이스2 ...]{
//	 멤버변수
//	 접근지정자[그외지정자] 데이터타입 변수명;
//	 클래스변수
//	 접근지정자 static 데이터타입 변수명;
//	 
//	 생성자
//	 접근지정자 클래스명([매개변수선언]) {}
//	멤버메서드
//	접근지정자[그외지정자] 리턴타입 메서드명([매개변수선언]) {
//		지역변수선언
//		데이터타입 변수명;
//		//사용하고자 하는 클래스의 객체 만드는 법. 지역변수 선언과 동일
//			사용할 클래스명 참조변수명(변수)= new 생성자()
//			만든 객체의 멤버를 사용
//			멤버변수 
//				참조변수명.멤버변수명 = 값;
//			멤버변수의 값을 불러오고 싶을 때
//				멤버변수와 같은 데이터타입 변수명=참조변수명.멤버변수명
//			멤버 메서드 리턴x 매개변수x
//				참조변수명.메서드명()
//			멤버메서드 리턴x 매개변수o
//				참조변수명.메서드명(매개변수와 같은 데이터타입의 데이터)
//			멤버메서드 리턴 o 매개변수x
//				리턴하는 데이터타입과 동일한 데이터 타입의 변수명 = 참조변수명.메서드명()
//			멤버메서드 리턴o 매개변수o
//			리턴하는 데이터타입과 동일한 데이터 타입의 변수명 = 참조변수명.메서드명(매개변수와 같은 데이터타입의 데이터)
//			클래스 변수 사용
//			클래스명.변수명
//			클래스메서드사용
//			클래스명.메서드명
//	}
//	클래스메서드
//	접근지정자 static 리턴타입 메서드명([매개변수선언]) {}
//	접근지정자
//	*public - 어디서든 사용이 가능
//	*protected - 같은 패키지에서만 사용 가능. 단, 상속관계에서만 접근 가능
//	*default - 같은 패키지 내에서만 사용 가능
//	*private - 같은 클래스 내에서만 사용가능
//	그외지정자
//	abstract
//	-class의 선언부 : 이 클래스를 상속해서 사용하세요.
//	-method 선언부 : 상속해서 오버라이딩해서 사용
//	final
//	-class의 선언부 : 상속 하지마라
//	-method의 선언부 : 오버라이딩 하지마라
//	-변수 선언부 : 상수로 사용(값 변경 불가)
//	static
//	-method의 선언부 : 클래스메서드임
//	-멤버변수 선언부  : 클래스변수


}
	

